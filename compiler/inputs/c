(in-package :c)

(cl:defmacro 8-bit-mode () `(s::8-bit-mode))
(cl:defmacro 16-bit-mode () `(s::16-bit-mode))
(cl:defmacro funcall (f) `(s::%jsr ',f))
(cl:defmacro => (var) `(far-back::store-variable ,var))
(cl:defmacro finalize () `(s::vector-table))

[#LoROM]
[#Data l Zero]
[#Data w pong_char]
[#Data w pong_frame]
[#Data w pong_pallet]
[#File reset.asm]

(proto set_background_color void ())

(proc (cg_dma int) (status b-bus a-bank a-bus cg-addr num-bytes)
  (8-bit-mode)
  cg-addr
  [STA CGADD]
  status
  [STA DMAP] ;; DMA Status
  b-bus
  [STA DMAB]
  a-bank
  [STA DMAA.b]
  (16-bit-mode)
  a-bus
  [STA DMAA]
  num-bytes
  [STA DMAD]
  (8-bit-mode)
  [LDA #$01]
  [STA MDMAEN]
  (16-bit-mode))

(proc (vm_dma int) (status b-bus a-bank a-bus vm-addr num-bytes)
  vm-addr
  [STA VMADD]
  (8-bit-mode)
  status
  [STA DMAP] ;; DMA Status
  b-bus
  [STA DMAB]
  a-bank
  [STA DMAA.b]
  (16-bit-mode)
  a-bus
  [STA DMAA]
  num-bytes
  [STA DMAD]
  (8-bit-mode)
  [LDA #$01]
  [STA MDMAEN]
  (16-bit-mode))

(proc (main int) ()
  (var hack int)
  [LDA #pong_pallet]
  (=> hack)
  (cg_dma #x0002 #x0022 #x0000 hack #x0000 #x0200)
  [LDA #pong_char]
  (=> hack)
  (vm_dma #x0001 #x0018 #x0000 hack #x0000 #x0800)
  [LDA #pong_frame]
  (=> hack)
  (vm_dma #x0001 #x0018 #x0000 hack #x0400 #x0800)

  (8-bit-mode)
  "Set screen to max brightness"
  [LDA #$0F]
  [STA INIDISP]
  "Graphics Mode 1"
  [LDA #$01]
  [STA BGMODE]
  ""
  [LDA #$04]
  [STA BG1SC]
  [LDA #$00]
  [STA BG12NBA]
  [LDA #$01]
  [STA TM]
  (16-bit-mode)

  (var color int 0)
  (while 1
    "Get input from the controller"
    [LDA $4218]
    (if [AND #$0100w] ;; is right button depressed?
        (++ color)
        color)
    (set_background_color color #x0000)))

(proc (set_background_color void) (color color_address)
  color_address
  (8-bit-mode)
  [STA $2121w]
  (16-bit-mode)

  color
  (8-bit-mode)
  [STA $2122w]
  [XBA]
  [STA $2122w]
  (16-bit-mode))

(interrupt-handler :reset
  [SEI]
  [CLC]
  [XCE]
  [REP #$38]
  [PHK]
  [LDA #$0000]
  [TCD]
  [LDX #$1FFF]
  [TXS]
  [LDA #$0000] [TAX] [TAY]
  [JSR Reset.Registers]
  [JSR Reset.VRAM]
  [JSR Reset.OAM]
  [JSR Reset.CGRAM]
  (funcall main))

[#Data l Zero {$0000}]
[#Data w pong_char {#pongChar.dat}]
[#Data w pong_frame {#pongFrame.dat}]
[#Data w pong_pallet {#pongPallet.dat}]
(finalize)
